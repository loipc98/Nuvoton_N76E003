C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 16:45:28 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Include) DEFINE(FOSC_160000) D
                    -EBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2016 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp. 
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Apr/21/2016
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: N76E885 ADC demo code
  16          //********************************************************************************************************
             -***
  17          
  18          #include "N76E003.h"
  19          #include "SFR_Macro.h"
  20          #include "Function_define.h"
  21          #include "Common.h"
  22          #include "Delay.h"
  23          
  24          //*****************  The Following is in define in Fucntion_define.h  ***************************
  25          //****** Always include Function_define.h call the define you want, detail see main(void) *******
  26          //***********************************************************************************************
  27          #if 0
              //#define Enable_ADC_BandGap  ADCCON0|=SET_BIT3;ADCCON0&=0xF8;                                                              //Band-gap 1.2
             -2V
              #endif
  30          
  31          double  Bandgap_Voltage,VDD_Voltage;      //please always use "double" mode for this
  32          unsigned  char xdata ADCdataH[5], ADCdataL[5];
  33          int ADCsumH=0, ADCsumL=0;
  34          unsigned char ADCavgH,ADCavgL;
  35          
  36          char chu_so[]={0xEB,0x88,0xB3,0xBA,0xD8,0x7A,0x7B,0xA8,0xFB,0xFA};
  37          #define DATA P03      //Du lieu 
  38          #define CLK P15       //Xung 
  39          #define LAT P17       //Chot du lieu de day ra 
  40          #define LED1 P13
  41          #define LED2 P12
  42          #define LED3 P11
  43          #define LED4 P10
  44          #define bat  0
C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 16:45:28 PAGE 2   

  45          #define tat  1
  46          int cnt = 0;
  47          unsigned long VDD;
  48          void HC595_Output(unsigned char a)
  49          {
  50   1        unsigned char i;
  51   1        for (i=0; i<8;i++)
  52   1        {
  53   2          DATA = a & (0x80 >> i);   //Dich bit de day du lieu ra
  54   2          CLK=0;
  55   2          CLK=1;
  56   2        }
  57   1        LAT=0;
  58   1        LAT=1;
  59   1      }
  60          
  61          void Timer0_Interrupt() interrupt 1
  62          {
  63   1        TH0=0xFA;       //Nap lai gia tri 
  64   1        TL0=0xCB;
  65   1        cnt++;
  66   1        if(cnt==5) cnt=1;
  67   1        if(cnt==1)
  68   1        {
  69   2          LED4=tat;
  70   2          LED1=tat;
  71   2          HC595_Output(chu_so[VDD/1000]);
  72   2          LED4=bat;
  73   2        }
  74   1       if(cnt==2)
  75   1        {
  76   2          LED3=tat;
  77   2          LED4=tat;
  78   2          HC595_Output(chu_so[(VDD%1000)/100]);
  79   2          LED3=bat;
  80   2        }
  81   1       if(cnt==3)
  82   1        {
  83   2          LED2=tat;
  84   2          LED3=tat;
  85   2          HC595_Output(chu_so[(VDD%100)/10]);
  86   2          LED2=bat;
  87   2        }
  88   1       if(cnt==4)
  89   1        {
  90   2          LED1=tat;
  91   2          LED2=tat;
  92   2          HC595_Output(chu_so[VDD%10]);
  93   2          LED1=bat;
  94   2        }
  95   1      }
  96          
  97          void READ_BANDGAP()
  98          {
  99   1          UINT8 BandgapHigh,BandgapLow,BandgapMark;
 100   1          double Bandgap_Value,Bandgap_Voltage_Temp;
 101   1        
 102   1          set_IAPEN;
 103   1          IAPCN = READ_UID;
 104   1          IAPAL = 0x0d;
 105   1          IAPAH = 0x00;
 106   1          set_IAPGO;
C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 16:45:28 PAGE 3   

 107   1          BandgapLow = IAPFD;
 108   1          BandgapMark = BandgapLow&0xF0;
 109   1            
 110   1          if (BandgapMark==0x80)
 111   1          {
 112   2              BandgapLow = BandgapLow&0x0F;
 113   2              IAPAL = 0x0C;
 114   2              IAPAH = 0x00;
 115   2              set_IAPGO;
 116   2              BandgapHigh = IAPFD;
 117   2              Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
 118   2              Bandgap_Voltage_Temp = Bandgap_Value*3/4;
 119   2              Bandgap_Voltage = Bandgap_Voltage_Temp - 33;      //the actually banggap voltage value is similar this va
             -lue.
 120   2          }
 121   1          if (BandgapMark==0x00)
 122   1          {
 123   2              BandgapLow = BandgapLow&0x0F;
 124   2              IAPAL = 0x0C;
 125   2              IAPAH = 0x00;
 126   2              set_IAPGO;
 127   2              BandgapHigh = IAPFD;
 128   2              Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
 129   2              Bandgap_Voltage= Bandgap_Value*3/4;
 130   2          }
 131   1          if (BandgapMark==0x90)
 132   1          {
 133   2              IAPAL = 0x0E;
 134   2              IAPAH = 0x00;
 135   2              set_IAPGO;
 136   2              BandgapHigh = IAPFD;
 137   2              IAPAL = 0x0F;
 138   2              IAPAH = 0x00;
 139   2              set_IAPGO;
 140   2              BandgapLow = IAPFD;
 141   2              BandgapLow = BandgapLow&0x0F;
 142   2              Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
 143   2              Bandgap_Voltage= Bandgap_Value*3/4;
 144   2          }
 145   1          clr_IAPEN;
 146   1      //      printf ("\n BG High = %bX",BandgapHigh); 
 147   1      //      printf ("\n BG Low = %bX",BandgapLow); 
 148   1      //      printf ("\n BG ROMMAP = %e",Bandgap_Voltage); 
 149   1      }
 150              
 151              
 152          /******************************************************************************
 153          The main C function.  Program execution starts
 154          here after stack initialization.
 155          ******************************************************************************/
 156          void main (void) 
 157          {
 158   1        double bgvalue;
 159   1        unsigned int i;
 160   1        P30_Input_Mode;         
 161   1        P10_Quasi_Mode;       //LED4 Output
 162   1        P11_Quasi_Mode;       //LED3 Output
 163   1        P12_Quasi_Mode;       //LED2 Output
 164   1        P13_Quasi_Mode;       //LED1 Output
 165   1        P15_Quasi_Mode;       //CLK  Output
 166   1        P17_Quasi_Mode;       //LAT  Output
 167   1        P03_Quasi_Mode;       //DATA Output
C51 COMPILER V9.60.0.0   MAIN                                                              08/26/2020 16:45:28 PAGE 4   

 168   1          // Khoi tao ngat Timer0
 169   1        TMOD=0x01;            //Khoi tao Timer Mode 1
 170   1        ET0=1;                //Cho phep ngat Timer
 171   1        EA=1;                 //Cho phep ngat toan cuc
 172   1        TR0=1;                //Khoi tao Timer0
 173   1          InitialUART0_Timer1(115200);
 174   1          READ_BANDGAP();
 175   1          printf ("\n BG ROMMAP = %e",Bandgap_Voltage); 
 176   1        
 177   1          while (1)
 178   1          {
 179   2              Enable_ADC_BandGap;                       
 180   2              CKDIV = 0x02;                             // IMPORTANT!! Modify system clock to 4MHz ,then add the ADC sampling cloc
             -k base to add the sampling timing.
 181   2              for(i=0;i<5;i++)                          // All following ADC detect timing is 200uS run under 4MHz.
 182   2              {
 183   3                  clr_ADCF;
 184   3                  set_ADCS;                               
 185   3                  while(ADCF == 0);
 186   3                  ADCdataH[i] = ADCRH;
 187   3                  ADCdataL[i] = ADCRL;
 188   3              }   
 189   2              CKDIV = 0x00;                             // After ADC sampling, modify system clock back to 16MHz to run next code.
 190   2              Disable_ADC;
 191   2              for(i=2;i<5;i++)                          // use the last 3 times data to make average 
 192   2              {
 193   3                ADCsumH = ADCsumH + ADCdataH[i];
 194   3                ADCsumL = ADCsumL + ADCdataL[i];
 195   3              }       
 196   2              ADCavgH = ADCsumH/3;
 197   2              ADCavgL = ADCsumL/3;
 198   2              bgvalue = (ADCavgH<<4) + ADCavgL;
 199   2              VDD_Voltage = (0x1000/bgvalue)*Bandgap_Voltage;
 200   2              VDD = VDD_Voltage;
 201   2              Timer0_Delay1ms(500);
 202   2              ADCsumH = 0;
 203   2              ADCsumL = 0;
 204   2          }
 205   1      }
 206          
 207          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1058    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =     10    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
