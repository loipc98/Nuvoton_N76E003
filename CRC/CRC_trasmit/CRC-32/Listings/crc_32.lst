C51 COMPILER V9.60.0.0   CRC_32                                                            11/18/2020 09:23:07 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CRC_32
OBJECT MODULE PLACED IN .\Objects\crc_32.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE crc_32.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\..\Include;..\CRC-32) DEF
                    -INE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Listings\crc_32.lst) TABS(2) OBJECT(.\Objects\crc_32.obj)

line level    source

   1          #include "Common.h"
   2          #include "Delay.h"
   3          #include "Function_Define.h"
   4          #include "SFR_Macro.h"
   5          #define POLY    0x04C11DB7  // CRC-32
   6          uint32_t xdata crcTable[256]; 
   7          unsigned char data1[] = {'1', '2', '3', '4', '5', '6', '7', '8', '9'};
   8          uint32_t c1;
   9          
  10          uint32_t crc32Compute(char * message, unsigned int nBytes)
  11          {
  12   1          unsigned int offset;
  13   1          unsigned char byte;
  14   1          uint32_t remainder = 0xFFFFFFFF;
  15   1          /* Divide the message by the polynomial, a byte at a time. */
  16   1          for( offset = 0; offset < nBytes; offset++)
  17   1          {
  18   2              byte = (remainder >> (32 - 8)) ^ message[offset];
  19   2              remainder = crcTable[byte] ^ (remainder << 8);
  20   2          }
  21   1          /* The final remainder is the CRC result. */
  22   1          return (remainder ^ 0xFFFFFFFF);
  23   1      }
  24          
  25          void crcInit(void)
  26          {
  27   1          uint32_t remainder;
  28   1          uint32_t dividend;
  29   1          int Bit;
  30   1          /* Perform binary long division, a bit at a time. */
  31   1          for(dividend = 0; dividend < 256; dividend++)
  32   1          {
  33   2              /* Initialize the remainder.  */
  34   2              remainder = dividend << (32 - 8);
  35   2              /* Shift and XOR with the polynomial.   */
  36   2              for(Bit = 0; Bit < 8; Bit++)
  37   2              {
  38   3                  /* Try to divide the current data bit.  */
  39   3                  if(remainder & 0x80000000)
  40   3                  {
  41   4                      remainder = (remainder << 1) ^ POLY;
  42   4                  }
  43   3                  else
  44   3                  {
  45   4                      remainder = remainder << 1;
  46   4                  }
  47   3              }
  48   2              /* Save the result in the table. */
  49   2              crcTable[dividend] = remainder;
  50   2          }
  51   1      }
  52          void main()
  53          {
  54   1        InitialUART0_Timer1(9600);
C51 COMPILER V9.60.0.0   CRC_32                                                            11/18/2020 09:23:07 PAGE 2   

  55   1        crcInit();
  56   1        while(1)
  57   1        {
  58   2          c1 = crc32Compute(data1, 9);  
  59   2          printf("%04x%04x\n", c1,c1<<16);
  60   2          Timer0_Delay1ms(1000);
  61   2        } 
  62   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    433    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   1024    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
